/*
Simple routines to play notes out to a speaker
*/
#include <avr/io.h>
#include <util/delay.h>
#include "SoundSystem.h"
#include "pinDefines.h"

#define NOTE_LENGTH 16340 // The base length; 1/24th of a note, in microseconds

/*
 * playNote
 *
 * Loads a Note object, with two tones/frequencies, into Timer0 and Timer1 OCR's,
 * so that this tone can be generated by an ISR.
 */
void playNote(Note note) {
  int i;
  OCR0A = note.Tone1;
  OCR2A = note.Tone2;
  while(i < note.Duration) {
    _delay_us(NOTE_LENGTH);
    i++;
  }
}

/*
 * playBackgroundNote
 *
 * Play two tones in the background, continuously.
 */
void playBackgroundNote(Note note) {
  OCR0A = note.Tone1;
  OCR2A = note.Tone2;
}

void playSong(const Note *song, const uint8_t song_length) {
  SoundSystem_Enable();
  
  for(int i = 0; i < song_length; i++) {
    playNote(song[i]);
  }
  
  SoundSystem_Disable();
}

/*
 * SoundSystem_Enable
 *
 * Enable the Sound System by loading the Timer0 and Timer2
 * config registers with settings for software OCXB pin toggling
 */
void SoundSystem_Enable() {
    // Timer 0, Fast PWM/CTC Mode, 1/256 Clock Prescale
    TCCR0A = _BV(WGM01) | _BV(WGM00);
    TCCR0B = _BV(WGM02) | _BV(CS02);
    
    // Timer 2, Fast PWM/CTC Mode, 1/256 Clock Prescale
    TCCR2A = _BV(WGM21) | _BV(WGM20);
    TCCR2B = _BV(WGM22) | _BV(CS22) | _BV(CS21);

    // Enable software interrupts for Timer0 and Timer1 output compare
    TIMSK0 = _BV(OCIE0A);
    TIMSK2 = _BV(OCIE2A);

    // Allow speaker pins as outputs
    SPEAKER1_DDR |= _BV(SPEAKER1_PIN);
    SPEAKER2_DDR |= _BV(SPEAKER2_PIN);
}

/*
 * SoundSystem_Disable
 *
 * Disable the SoundSystem from generating any tones by removing
 * the source of clock generation/input from the Timer0 and Timer2 hardware
 */
void SoundSystem_Disable() {
    // Disable interrupts from toggling pins while speakers are meant to be off.
    TIMSK0 &= ~_BV(OCIE0A);
    TIMSK2 &= ~_BV(OCIE2A);

    // Arduino uses Timer0 and Timer 2 internally, so re-write their CS values.
    TCCR0B = 0b11;
    TCCR2B = 0b100;
    
    // Do not allow speaker pins as outputs
    SPEAKER1_DDR &= ~_BV(SPEAKER1_PIN);
    SPEAKER2_DDR &= ~_BV(SPEAKER2_PIN);
    // Disable pullups; we have external pulldowns.
    SPEAKER1_PORT &= ~_BV(SPEAKER1_PIN);
    SPEAKER2_PORT &= ~_BV(SPEAKER2_PIN);
}
